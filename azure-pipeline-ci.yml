# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger: none
pr: none


pool:
  name: PoolRunners

variables:
  # Global variables
  ACR_NAME: 'myacr12369874'
  IMAGE_NAME: 'nextjsbaseapp'
  IMAGE_TAG: $(Build.BuildId)
  NODE_VERSION: '20.x'
  npm_config_cache: $(Pipeline.Workspace)/.npmcache

stages:

# This stage builds a Docker image and pushes it to the Azure Container Registry (ACR). 
- stage: DockerBuildAndPush
  displayName: 'Docker Build and Push Stage'
  jobs:
  - job: DockerBuildPush
    displayName: 'Build and Push Docker Image'
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'ACR'     #Peer to peer connection with Azure Container Registry 
        repository: '$(IMAGE_NAME)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(IMAGE_TAG)
      displayName: 'Build and Push Docker Image to ACR'  

- stage: Scan
  displayName: 'Scan Image'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: ScanImage
    displayName: 'Scan Image Job'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        containerRegistry: 'ACR'
        repository: '$(IMAGE_NAME)'
        command: 'login'
    - task: trivy@1
      inputs:
        version: 'latest'
        docker: false
        loginDockerConfig: true
        image: $(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(Build.BuildId)
        ignoreUnfixed: true
      displayName: Scan Docker image with Trivy












# Stage 1: Install Node.js and Dependencies
#- stage: Install
#  displayName: 'Install Stage'
#  jobs:
#  - job: Install
#    displayName: 'Install Node.js and Dependencies'
#    steps:
#    - task: NodeTool@0
#      inputs:
#        versionSpec: $(NODE_VERSION)
#      displayName: 'Install Node.js'
#
#    - task: Cache@2
#      inputs:
#        key: 'npm | "$(Agent.OS)" | package-lock.json'
#        path: $(Build.SourcesDirectory)/node_modules
#        cacheHitVar: CACHE_RESTORED
#      displayName: 'Cache node_modules'
#
#    - script: |
#        npm ci
#      displayName: 'Install dependencies'
#
#    - script: |
#        npm run lint
#      displayName: 'Lint code'
#
#    - script: |
#        npm run build
#        cp -R .next/* $(Build.ArtifactStagingDirectory)/
#      displayName: 'Build and prepare artifacts'
#
#    - task: PublishBuildArtifacts@1
#      inputs:
#        pathToPublish: $(Build.ArtifactStagingDirectory)
#        artifactName: 'drop'
#      displayName: 'Publish build artifacts'


#Stage 2: Docker Build & Push
#- stage: BuildImage
#  displayName: 'Build Docker Image'
#  #dependsOn: Install  # Ensures this stage depends on the Install stage.
#  jobs:
#  - job: DockerBuild
#    displayName: 'Build Docker Image'
#    steps:
#    - task: Docker@2
#      inputs:
#        containerRegistry: 'DockerHub'  # Reference your DockerHub => Service connection name.
#        repository: '$(IMAGE_NAME)'  # Correct variable reference for the image name.
#        command: 'build'  #(Docker@2 uses "build").
#        Dockerfile: '**/Dockerfile'  # File path to the Dockerfile.
#      displayName: 'Build the Docker image'
#
#  - job: DockerPush
#    dependsOn: DockerBuild
#    displayName: 'Push Docker Image'
#    steps:
#    - task: Docker@2
#      inputs:
#        containerRegistry: 'DockerHub'  # Reference the service connection for DockerHub.
#        repository: '$(IMAGE_NAME)'
#        command: 'push'
#      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))  # Push only if build succeeds and it's not a PR.
#      displayName: 'Push the Docker image to DockerHub'
#      
#    - script: |
#        docker rmi $(IMAGE_NAME):$(Build.BuildId) || echo "Image already deleted"
#      displayName: 'Delete local Docker image'
#      condition: succeeded()


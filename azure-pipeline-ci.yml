# Node.js Pipeline
# This pipeline builds, tests, and deploys a Node.js project, including Docker image build and push to Azure Container Registry (ACR).

trigger:
  - none  # No automatic triggers; the pipeline can be triggered manually or via a PR.

pr:
  - none  # No specific PR triggers are defined.

pool:
  name: AZURE-VM-Agent  # Use the Self Hosted Runner VMSS for the pipeline agent [Ubuntu].
  #name: MigTestPool  # Use the Self Hosted Runner for the pipeline agent [Windows].

variables:
  IMAGE_NAME: 'nestjs-microtemplate'  # Name of the Docker image.
  ACR_NAME: 'acr003nonprdemearepo'  # Replace with the name of your Azure Container Registry.
  IMAGE_TAG: '$(Build.BuildId)'  # Use the build ID as a unique tag for the Docker image.
  BUILD_SOURCES_DIR: $(Build.SourcesDirectory)


stages:
#Stage 1: Install Node.js and Dependencies
#This stage installs Node.js, restores npm dependencies, and prepares the environment for testing.
- stage: Install
  displayName: 'Install Stage'
  jobs:
  - job: Install
    displayName: 'Install Node.js and Dependencies'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(NODE_VERSION)
      displayName: 'Install Node.js'

    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        path: $(Build.SourcesDirectory)/node_modules
        cacheHitVar: CACHE_RESTORED
      displayName: 'Cache node_modules'

    - script: |
        npm ci
      displayName: 'Install dependencies'

    - script: |
        npm run lint
      displayName: 'Lint code'

    - script: |
        npm run build
        cp -R .next/* $(Build.ArtifactStagingDirectory)/
      displayName: 'Build and prepare artifacts'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: 'drop'
      displayName: 'Publish build artifacts'



####################################################################
##############-----------------UBUNTU-----------------##############
####################################################################
- stage: DockerBuildAndPush
  displayName: 'Docker Build and Push Stage'
  dependsOn: BuildAndPublish
  jobs:
    - job: DockerBuildPush
      displayName: 'Build and Push Docker Image'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: 'RG-Dev-ConnWorkers-AKS'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              set -e
              
              echo "Validating ..."
              docker -v  || echo "-----------No Docker Installed-----------"
              kubectl -v || echo "-----------No Kubectl Installed-----------"
              az --version

              echo "Authenticating with Azure using Managed Identity..."
              az login --identity
              
              echo "Listing available ACRs..."
              az acr list --subscription "ConnectedWorkers-Dev" --query "[].{name:name, resourceGroup:resourceGroup}" -o table
              az group list

              echo "Navigating to microservice directory..."
              cd "$(BUILD_SOURCES_DIR)"
              
              echo "Logging in to ACR..."
              az acr login -n $(ACR_NAME)

              echo "Building Docker image..."
              docker build -t "$(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(IMAGE_TAG)" .

              echo "Pushing Docker image to ACR..."
              docker push "$(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(IMAGE_TAG)"
              
              echo "Docker image pushed successfully."






# Stage 1: Install Node.js and Dependencies
#- stage: Install
#  displayName: 'Install Stage'
#  jobs:
#  - job: Install
#    displayName: 'Install Node.js and Dependencies'
#    steps:
#    - task: NodeTool@0
#      inputs:
#        versionSpec: $(NODE_VERSION)
#      displayName: 'Install Node.js'
#
#    - task: Cache@2
#      inputs:
#        key: 'npm | "$(Agent.OS)" | package-lock.json'
#        path: $(Build.SourcesDirectory)/node_modules
#        cacheHitVar: CACHE_RESTORED
#      displayName: 'Cache node_modules'
#
#    - script: |
#        npm ci
#      displayName: 'Install dependencies'
#
#    - script: |
#        npm run lint
#      displayName: 'Lint code'
#
#    - script: |
#        npm run build
#        cp -R .next/* $(Build.ArtifactStagingDirectory)/
#      displayName: 'Build and prepare artifacts'
#
#    - task: PublishBuildArtifacts@1
#      inputs:
#        pathToPublish: $(Build.ArtifactStagingDirectory)
#        artifactName: 'drop'
#      displayName: 'Publish build artifacts'


#Stage 2: Docker Build & Push
#- stage: BuildImage
#  displayName: 'Build Docker Image'
#  #dependsOn: Install  # Ensures this stage depends on the Install stage.
#  jobs:
#  - job: DockerBuild
#    displayName: 'Build Docker Image'
#    steps:
#    - task: Docker@2
#      inputs:
#        containerRegistry: 'DockerHub'  # Reference your DockerHub => Service connection name.
#        repository: '$(IMAGE_NAME)'  # Correct variable reference for the image name.
#        command: 'build'  #(Docker@2 uses "build").
#        Dockerfile: '**/Dockerfile'  # File path to the Dockerfile.
#      displayName: 'Build the Docker image'
#
#  - job: DockerPush
#    dependsOn: DockerBuild
#    displayName: 'Push Docker Image'
#    steps:
#    - task: Docker@2
#      inputs:
#        containerRegistry: 'DockerHub'  # Reference the service connection for DockerHub.
#        repository: '$(IMAGE_NAME)'
#        command: 'push'
#      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))  # Push only if build succeeds and it's not a PR.
#      displayName: 'Push the Docker image to DockerHub'
#      
#    - script: |
#        docker rmi $(IMAGE_NAME):$(Build.BuildId) || echo "Image already deleted"
#      displayName: 'Delete local Docker image'
#      condition: succeeded()

